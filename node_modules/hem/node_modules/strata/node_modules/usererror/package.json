{
  "author": {
    "name": "Michael Jackson",
    "email": "mjijackson@gmail.com"
  },
  "name": "usererror",
  "description": "A base class for V8 JavaScript errors",
  "version": "1.0.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/mjijackson/usererror.git"
  },
  "main": "./user-error.js",
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">=0.4.7"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.5.0"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mjijackson/usererror.png)](http://travis-ci.org/mjijackson/usererror)\n\nUserError: Because JavaScript errors could be a lot more useful.\n\nThis package provides a base constructor (i.e. \"class\") that makes JavaScript\nerrors on V8 a lot more useful. Errors built using this class have the following\nbenefits:\n\n  - They are easily subclassed\n  - They are nestable (see below)\n\n## Installation\n\nInstall this package using [npm](http://npmjs.org):\n\n    $ npm install usererror\n\nYou are also free to [browse or download the source](https://github.com/mjijackson/error).\n\n## Usage\n\nThe simplest usage for this class is:\n\n```javascript\nvar UserError = require('usererror');\n\ntry {\n  throw new UserError('Kaboom!');\n} catch (e) {\n  console.log(e.message);\n}\n```\n\nErrors are nestable, so an error can have a reference to another error that\ncaused it. This is useful when you'd like to throw a high level error that was\nactually caused by some lower level error. The error that was the cause is used\nas the second argument to the constructor.\n\nIn the example below, we define our own error class `LoginFailedError` that\ninherits from `UserError`. An instance of this class is passed to the\n`loginUser` callback when it fails for some reason. Inside `loginUser` we try\nand connect to the database. In reality, we could be doing any number of things\nthat may ultimately cause an error (e.g. reading from a flat file of user data,\nvalidating the user id, etc.). However, we want callers to know that `loginUser`\nwill always return a `LoginFailedError` if it fails, and not some other error.\n\nThe solution is to wrap any other error in a `LoginFailedError` before passing\nit back up the callback chain. This allows us to preserve the full stack trace\nof the error (in the `fullStack` property) while giving callers a reasonable\nexpectation for what class(es) of errors they can expect.\n\nNote: The `stack` property still works as you would expect, and only contains\nthe stack trace for the error one level deep.\n\n```javascript\nvar util = require('util');\nvar UserError = require('usererror');\n\nfunction LoginFailedError(cause) {\n  UserError.call(this, 'Login failed', cause);\n}\n\nutil.inherits(LoginFailedError, UserError);\n\nfunction loginUser(userId, callback) {\n  connectToDatabase(function (err, db) {\n    if (err) {\n      callback(new LoginFailedError(err));\n    }\n\n    // Login the user.\n  });\n}\n\nloginUser(myUserId, function (err) {\n  console.log(err.fullStack); // Recursive stack trace.\n  console.log(err.stack); // Single-level stack trace.\n});\n```\n\n## License\n\nCopyright 2011 Michael Jackson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nThe software is provided \"as is\", without warranty of any kind, express or\nimplied, including but not limited to the warranties of merchantability,\nfitness for a particular purpose and non-infringement. In no event shall the\nauthors or copyright holders be liable for any claim, damages or other\nliability, whether in an action of contract, tort or otherwise, arising from,\nout of or in connection with the software or the use or other dealings in\nthe software.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mjijackson/usererror/issues"
  },
  "homepage": "https://github.com/mjijackson/usererror",
  "_id": "usererror@1.0.2",
  "_from": "usererror@~1.0.1"
}
